-- Create the ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AnimationIDViewer"
screenGui.ResetOnSpawn = false  -- Prevent the GUI from being removed on character reset
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create the main frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 200, 0, 320)
mainFrame.Position = UDim2.new(0, 100, 0, 100)
mainFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

-- Create the header frame for dragging
local headerFrame = Instance.new("Frame")
headerFrame.Size = UDim2.new(1, 0, 0, 20)
headerFrame.Position = UDim2.new(0, 0, 0, 0)
headerFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
headerFrame.BorderSizePixel = 0
headerFrame.Parent = mainFrame

-- Create the title label
local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(1, 0, 1, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.Text = "Animations ID Logger"
titleLabel.TextSize = 14
titleLabel.Font = Enum.Font.SourceSans
titleLabel.Parent = headerFrame

-- Code to make the GUI draggable (same as before)

-- Create the scrolling frame
local scrollingFrame = Instance.new("ScrollingFrame")
scrollingFrame.Size = UDim2.new(1, 0, 1, -20)
scrollingFrame.Position = UDim2.new(0, 0, 0, 20)
scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Initial canvas size set to 0
scrollingFrame.ScrollBarThickness = 8
scrollingFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
scrollingFrame.BorderSizePixel = 0
scrollingFrame.Parent = mainFrame

-- Table to keep track of added animation IDs
local addedAnimationIDs = {}

-- Function to create a text button for each animation ID and name
local function createAnimationButton(animationId, animationName)
    if addedAnimationIDs[animationId] then return end
    addedAnimationIDs[animationId] = true

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -10, 0, 30)
    button.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
    button.BorderSizePixel = 0
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Text = animationName .. " | ID: " .. animationId
    button.TextSize = 14
    button.TextWrapped = true
    button.Parent = scrollingFrame

    button.MouseButton1Click:Connect(function() 
        setclipboard(tostring(animationId)) 
        print("Copied to clipboard: " .. animationId) 
    end)

    button.Position = UDim2.new(0, 5, 0, (#scrollingFrame:GetChildren() - 1) * 35)

    local contentHeight = #scrollingFrame:GetChildren() * 35
    scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, contentHeight)
end

-- Function to handle when an animation track is played
local function onAnimationPlayed(animationTrack)
    local animation = animationTrack.Animation
    if animation then
        local animationId = animation.AnimationId:match("%d+$") -- Correctly match the ID
        local animationName = animation.Name or "Unknown Animation"
        
        print("Animation Played: " .. animationName .. " | ID: " .. (animationId or "N/A")) -- Debugging print
        
        if animationId then
            createAnimationButton(animationId, animationName)
        end
    else
        print("No animation found") -- Debugging print
    end
end

-- Connect to the player's humanoid animations
local function trackAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        print("Tracking animations for humanoid") -- Debugging print
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    else
        print("No humanoid found in character") -- Debugging print
    end
end

-- Listen for the player's character
local player = game.Players.LocalPlayer
player.CharacterAdded:Connect(trackAnimations)

-- If character is already added, track animations directly
if player.Character then
    print("Character found, tracking animations directly")
    trackAnimations(player.Character)
else
    print("No character found yet") -- Debugging print
end
